// Code generated by MockGen. DO NOT EDIT.
// Source: llm.go

// Package mock_gollum is a generated GoMock package.
package mock_gollum

import (
	context "context"
	reflect "reflect"

	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockCompleter is a mock of Completer interface.
type MockCompleter struct {
	ctrl     *gomock.Controller
	recorder *MockCompleterMockRecorder
}

// MockCompleterMockRecorder is the mock recorder for MockCompleter.
type MockCompleterMockRecorder struct {
	mock *MockCompleter
}

// NewMockCompleter creates a new mock instance.
func NewMockCompleter(ctrl *gomock.Controller) *MockCompleter {
	mock := &MockCompleter{ctrl: ctrl}
	mock.recorder = &MockCompleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompleter) EXPECT() *MockCompleterMockRecorder {
	return m.recorder
}

// CreateCompletion mocks base method.
func (m *MockCompleter) CreateCompletion(arg0 context.Context, arg1 openai.CompletionRequest) (openai.CompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletion", arg0, arg1)
	ret0, _ := ret[0].(openai.CompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletion indicates an expected call of CreateCompletion.
func (mr *MockCompleterMockRecorder) CreateCompletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletion", reflect.TypeOf((*MockCompleter)(nil).CreateCompletion), arg0, arg1)
}

// MockChatCompleter is a mock of ChatCompleter interface.
type MockChatCompleter struct {
	ctrl     *gomock.Controller
	recorder *MockChatCompleterMockRecorder
}

// MockChatCompleterMockRecorder is the mock recorder for MockChatCompleter.
type MockChatCompleterMockRecorder struct {
	mock *MockChatCompleter
}

// NewMockChatCompleter creates a new mock instance.
func NewMockChatCompleter(ctrl *gomock.Controller) *MockChatCompleter {
	mock := &MockChatCompleter{ctrl: ctrl}
	mock.recorder = &MockChatCompleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatCompleter) EXPECT() *MockChatCompleterMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockChatCompleter) CreateChatCompletion(arg0 context.Context, arg1 openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", arg0, arg1)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockChatCompleterMockRecorder) CreateChatCompletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockChatCompleter)(nil).CreateChatCompletion), arg0, arg1)
}

// MockEmbedder is a mock of Embedder interface.
type MockEmbedder struct {
	ctrl     *gomock.Controller
	recorder *MockEmbedderMockRecorder
}

// MockEmbedderMockRecorder is the mock recorder for MockEmbedder.
type MockEmbedderMockRecorder struct {
	mock *MockEmbedder
}

// NewMockEmbedder creates a new mock instance.
func NewMockEmbedder(ctrl *gomock.Controller) *MockEmbedder {
	mock := &MockEmbedder{ctrl: ctrl}
	mock.recorder = &MockEmbedderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbedder) EXPECT() *MockEmbedderMockRecorder {
	return m.recorder
}

// CreateEmbeddings mocks base method.
func (m *MockEmbedder) CreateEmbeddings(arg0 context.Context, arg1 openai.EmbeddingRequest) (openai.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmbeddings", arg0, arg1)
	ret0, _ := ret[0].(openai.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmbeddings indicates an expected call of CreateEmbeddings.
func (mr *MockEmbedderMockRecorder) CreateEmbeddings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmbeddings", reflect.TypeOf((*MockEmbedder)(nil).CreateEmbeddings), arg0, arg1)
}

// MockModerator is a mock of Moderator interface.
type MockModerator struct {
	ctrl     *gomock.Controller
	recorder *MockModeratorMockRecorder
}

// MockModeratorMockRecorder is the mock recorder for MockModerator.
type MockModeratorMockRecorder struct {
	mock *MockModerator
}

// NewMockModerator creates a new mock instance.
func NewMockModerator(ctrl *gomock.Controller) *MockModerator {
	mock := &MockModerator{ctrl: ctrl}
	mock.recorder = &MockModeratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModerator) EXPECT() *MockModeratorMockRecorder {
	return m.recorder
}

// Moderations mocks base method.
func (m *MockModerator) Moderations(arg0 context.Context, arg1 openai.ModerationRequest) (openai.ModerationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Moderations", arg0, arg1)
	ret0, _ := ret[0].(openai.ModerationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Moderations indicates an expected call of Moderations.
func (mr *MockModeratorMockRecorder) Moderations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Moderations", reflect.TypeOf((*MockModerator)(nil).Moderations), arg0, arg1)
}
