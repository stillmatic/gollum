// Code generated by MockGen. DO NOT EDIT.
// Source: llm.go

// Package mock_gollum is a generated GoMock package.
package mock_gollum

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openai "github.com/sashabaranov/go-openai"
)

// MockLLM is a mock of LLM interface.
type MockLLM struct {
	ctrl     *gomock.Controller
	recorder *MockLLMMockRecorder
}

// MockLLMMockRecorder is the mock recorder for MockLLM.
type MockLLMMockRecorder struct {
	mock *MockLLM
}

// NewMockLLM creates a new mock instance.
func NewMockLLM(ctrl *gomock.Controller) *MockLLM {
	mock := &MockLLM{ctrl: ctrl}
	mock.recorder = &MockLLMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLM) EXPECT() *MockLLMMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockLLM) CreateChatCompletion(arg0 context.Context, arg1 openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", arg0, arg1)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockLLMMockRecorder) CreateChatCompletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockLLM)(nil).CreateChatCompletion), arg0, arg1)
}

// CreateCompletion mocks base method.
func (m *MockLLM) CreateCompletion(arg0 context.Context, arg1 openai.CompletionRequest) (openai.CompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletion", arg0, arg1)
	ret0, _ := ret[0].(openai.CompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletion indicates an expected call of CreateCompletion.
func (mr *MockLLMMockRecorder) CreateCompletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletion", reflect.TypeOf((*MockLLM)(nil).CreateCompletion), arg0, arg1)
}

// CreateEmbeddings mocks base method.
func (m *MockLLM) CreateEmbeddings(arg0 context.Context, arg1 openai.EmbeddingRequest) (openai.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmbeddings", arg0, arg1)
	ret0, _ := ret[0].(openai.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmbeddings indicates an expected call of CreateEmbeddings.
func (mr *MockLLMMockRecorder) CreateEmbeddings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmbeddings", reflect.TypeOf((*MockLLM)(nil).CreateEmbeddings), arg0, arg1)
}
