// Code generated by MockGen. DO NOT EDIT.
// Source: llm.go

// Package mock_llm is a generated GoMock package.
package mock_llm

import (
	context "context"
	reflect "reflect"

	llm "github.com/stillmatic/gollum/packages/llm"
	gomock "go.uber.org/mock/gomock"
)

// MockResponder is a mock of Responder interface.
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
}

// MockResponderMockRecorder is the mock recorder for MockResponder.
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance.
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// GenerateResponse mocks base method.
func (m *MockResponder) GenerateResponse(ctx context.Context, req llm.InferRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponse", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponse indicates an expected call of GenerateResponse.
func (mr *MockResponderMockRecorder) GenerateResponse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponse", reflect.TypeOf((*MockResponder)(nil).GenerateResponse), ctx, req)
}

// GenerateResponseAsync mocks base method.
func (m *MockResponder) GenerateResponseAsync(ctx context.Context, req llm.InferRequest) (<-chan llm.StreamDelta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponseAsync", ctx, req)
	ret0, _ := ret[0].(<-chan llm.StreamDelta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponseAsync indicates an expected call of GenerateResponseAsync.
func (mr *MockResponderMockRecorder) GenerateResponseAsync(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponseAsync", reflect.TypeOf((*MockResponder)(nil).GenerateResponseAsync), ctx, req)
}

// MockEmbedder is a mock of Embedder interface.
type MockEmbedder struct {
	ctrl     *gomock.Controller
	recorder *MockEmbedderMockRecorder
}

// MockEmbedderMockRecorder is the mock recorder for MockEmbedder.
type MockEmbedderMockRecorder struct {
	mock *MockEmbedder
}

// NewMockEmbedder creates a new mock instance.
func NewMockEmbedder(ctrl *gomock.Controller) *MockEmbedder {
	mock := &MockEmbedder{ctrl: ctrl}
	mock.recorder = &MockEmbedderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbedder) EXPECT() *MockEmbedderMockRecorder {
	return m.recorder
}

// GenerateEmbedding mocks base method.
func (m *MockEmbedder) GenerateEmbedding(ctx context.Context, req llm.EmbedRequest) (*llm.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmbedding", ctx, req)
	ret0, _ := ret[0].(*llm.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmbedding indicates an expected call of GenerateEmbedding.
func (mr *MockEmbedderMockRecorder) GenerateEmbedding(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmbedding", reflect.TypeOf((*MockEmbedder)(nil).GenerateEmbedding), ctx, req)
}
