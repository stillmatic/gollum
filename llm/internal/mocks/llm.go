// Code generated by MockGen. DO NOT EDIT.
// Source: llm.go

// Package mock_llm is a generated GoMock package.
package mock_llm

import (
	context "context"
	reflect "reflect"

	llm "github.com/stillmatic/gollum/llm"
	gomock "go.uber.org/mock/gomock"
)

// MockLLMProvider is a mock of LLMProvider interface.
type MockLLMProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLLMProviderMockRecorder
}

// MockLLMProviderMockRecorder is the mock recorder for MockLLMProvider.
type MockLLMProviderMockRecorder struct {
	mock *MockLLMProvider
}

// NewMockLLMProvider creates a new mock instance.
func NewMockLLMProvider(ctrl *gomock.Controller) *MockLLMProvider {
	mock := &MockLLMProvider{ctrl: ctrl}
	mock.recorder = &MockLLMProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMProvider) EXPECT() *MockLLMProviderMockRecorder {
	return m.recorder
}

// GenerateResponse mocks base method.
func (m *MockLLMProvider) GenerateResponse(ctx context.Context, req llm.InferRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponse", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponse indicates an expected call of GenerateResponse.
func (mr *MockLLMProviderMockRecorder) GenerateResponse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponse", reflect.TypeOf((*MockLLMProvider)(nil).GenerateResponse), ctx, req)
}

// GenerateResponseAsync mocks base method.
func (m *MockLLMProvider) GenerateResponseAsync(ctx context.Context, req llm.InferRequest) (<-chan llm.StreamDelta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponseAsync", ctx, req)
	ret0, _ := ret[0].(<-chan llm.StreamDelta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponseAsync indicates an expected call of GenerateResponseAsync.
func (mr *MockLLMProviderMockRecorder) GenerateResponseAsync(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponseAsync", reflect.TypeOf((*MockLLMProvider)(nil).GenerateResponseAsync), ctx, req)
}
